
import os
import io
import cv2
import requests

from PIL import Image


def clean_llm_json(llm_response):
    """
    Cleans LLM response by localizing the JSON portion of the generated text. This allows one to process LLM responses
    in which the LLM prepends (or appends) prose to the actual JSON of interest. See example below, from which only
    the JSON string would be extracted

        Sure thing! Here is your JSON:
        { "name": "test" }

    :param llm_response: Text generated by an LLM prompted to produce a JSON
    :return: Clean JSON string
    """

    clean_json_response = ""
    capture = False

    for i in llm_response:
        if i == "{":
            capture = True
        if capture:
            clean_json_response += i
        if i == "}":
            break

    return clean_json_response


def pil_image_to_binary(pil_image, format="JPEG"):
    """
    Converts PIL image in any format to binary data (as bytes). It returns binary data.

    :param pil_image: Loaded image
    :param format: The format to save the image in (by default 'JPEG'). Common formats include 'PNG', 'JPEG', 'BMP', etc.
    :return: Binary data of the image in the specified format
    """

    byte_array = io.BytesIO()
    pil_image.save(byte_array, format=format)
    byte_data = byte_array.getvalue()

    return byte_data


def load_image_multi_source(image_path):
    """
    Loads an image from a given path, whether it's from a URL, a local file, or a video. 
    If the path points to a video file, it will extract the first frame as an image.

    :param image_path: URL or a local file path
    :return: raw image
    """

    if image_path.startswith(("http://", "https://")):
        response = requests.get(image_path, stream=True)
        response.raise_for_status()
        raw_image = Image.open(response.raw).convert("RGB")

    elif os.path.exists(image_path):
        if image_path.lower().endswith(".mp4"):
            video_capture = cv2.VideoCapture(image_path)
            success, frame = video_capture.read()
            if success:
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                raw_image = Image.fromarray(frame_rgb)
            else:
                video_capture.release()
                raise ValueError("Could not read the video file or extract the first frame.")
            video_capture.release()
        else:
            raw_image = Image.open(image_path).convert("RGB")

    else:
        raise ValueError("The provided path is neither a valid URL, a local file path, nor a video file.")

    return raw_image
